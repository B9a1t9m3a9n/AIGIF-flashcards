import { storage } from "./storage";
import { db } from "@db";
import { eq } from "drizzle-orm";
import { flashcards, flashcardSets } from "@shared/schema";
import OpenAI from "openai";

interface SyllableBreakdown {
  text: string;
  isHighlighted?: boolean;
}

interface AIFlashcardGenerationResult {
  word: string;
  pronunciation: string;
  definition: string;
  exampleSentence: string;
  gifUrl?: string;
  audioUrl?: string;
  syllables: SyllableBreakdown[];
}

// Initialize OpenAI client
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export class AIHelper {
  /**
   * Generate a new flashcard for a given word using OpenAI
   */
  static async generateFlashcard(word: string): Promise<AIFlashcardGenerationResult> {
    if (!process.env.OPENAI_API_KEY) {
      console.warn("OpenAI API key not found. Using fallback content generation.");
      return this.fallbackGenerateFlashcard(word);
    }

    try {
      // Make a request to OpenAI
      const response = await openai.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [
          {
            role: "system",
            content: "You are a helpful educational assistant specialized in creating content for young readers to learn new words."
          },
          {
            role: "user",
            content: `Generate a flashcard for the word "${word}" with the following: 
              1. A simple, child-friendly definition
              2. The correct pronunciation (phonetically)
              3. An example sentence appropriate for young learners
              4. A breakdown of the word into syllables
              
              Format your response as JSON with these fields:
              definition, pronunciation, exampleSentence, syllables (as an array of syllable objects with text property)
            `
          }
        ],
        response_format: { type: "json_object" }
      });

      const content = response.choices[0].message.content;
      if (!content) {
        throw new Error("Empty response from OpenAI");
      }

      const result = JSON.parse(content);
      
      // Generate a GIF for the word using DALL-E
      let gifUrl = undefined;
      
      try {
        const dalleResponse = await openai.images.generate({
          model: "dall-e-3",
          prompt: `Create a simple, child-friendly illustration that represents the word "${word}". Make it visually appealing for elementary school children.`,
          n: 1,
          size: "1024x1024",
          quality: "standard",
          response_format: "url"
        });
        
        // Type guard to ensure data is defined and has at least one element
        if (dalleResponse && 
            dalleResponse.data && 
            Array.isArray(dalleResponse.data) && 
            dalleResponse.data.length > 0 &&
            dalleResponse.data[0].url) {
          gifUrl = dalleResponse.data[0].url;
        }
      } catch (imageError) {
        console.error("Error generating image with DALL-E:", imageError);
        // Continue without image if DALL-E fails
      }
      
      return {
        word,
        pronunciation: result.pronunciation || word.toLowerCase(),
        definition: result.definition || `Definition of ${word}`,
        exampleSentence: result.exampleSentence || `This is an example sentence using the word ${word}.`,
        gifUrl: gifUrl, // Generated by DALL-E
        audioUrl: undefined, // Would be generated using TTS in a future enhancement
        syllables: result.syllables || this.fallbackBreakIntoSyllables(word).map(s => ({ text: s }))
      };
    } catch (error) {
      console.error("Error using OpenAI to generate flashcard:", error);
      return this.fallbackGenerateFlashcard(word);
    }
  }

  /**
   * Generate a sentence for a word with OpenAI
   */
  static async generateSampleSentence(word: string): Promise<string> {
    if (!process.env.OPENAI_API_KEY) {
      return this.fallbackGenerateSampleSentence(word);
    }

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [
          {
            role: "system", 
            content: "You are a helpful assistant specialized in generating simple, age-appropriate example sentences for elementary school children."
          },
          {
            role: "user",
            content: `Generate a simple, clear example sentence using the word "${word}" appropriate for a young learner. The sentence should be engaging and help illustrate the meaning of the word.`
          }
        ]
      });

      const sentence = response.choices[0].message.content?.trim();
      return sentence || this.fallbackGenerateSampleSentence(word);
    } catch (error) {
      console.error("Error using OpenAI to generate sample sentence:", error);
      return this.fallbackGenerateSampleSentence(word);
    }
  }
  
  /**
   * Analyze pronunciation accuracy with OpenAI
   * In a real implementation, this would compare recorded audio to correct pronunciation
   */
  static async analyzePronunciation(recordedAudio: string, correctPronunciation: string): Promise<number> {
    // This would use OpenAI's audio analysis capabilities in a real implementation
    // Currently returning a placeholder value
    return Math.floor(Math.random() * 41) + 60;
  }
  
  /**
   * Generate feedback for a pronunciation attempt with OpenAI
   */
  static async generatePronunciationFeedback(word: string, accuracy: number): Promise<string> {
    if (!process.env.OPENAI_API_KEY) {
      return this.fallbackGeneratePronunciationFeedback(word, accuracy);
    }

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: [
          {
            role: "system",
            content: "You are a supportive, encouraging language tutor for young learners."
          },
          {
            role: "user",
            content: `A student has attempted to pronounce the word "${word}" and scored ${accuracy}% accuracy. 
            Generate brief, encouraging feedback (1-2 sentences) that is:
            - Positive and motivational
            - Age-appropriate for elementary students
            - Specific to their performance level (excellent for 90%+, good for 75-89%, needs practice for below 75%)`
          }
        ]
      });

      const feedback = response.choices[0].message.content?.trim();
      return feedback || this.fallbackGeneratePronunciationFeedback(word, accuracy);
    } catch (error) {
      console.error("Error using OpenAI to generate pronunciation feedback:", error);
      return this.fallbackGeneratePronunciationFeedback(word, accuracy);
    }
  }

  // Fallback methods when OpenAI is not available

  private static fallbackGenerateFlashcard(word: string): AIFlashcardGenerationResult {
    const syllables = this.fallbackBreakIntoSyllables(word);
    
    return {
      word,
      pronunciation: word.toLowerCase(),
      definition: `Definition of ${word}`,
      exampleSentence: `This is an example sentence using the word ${word}.`,
      gifUrl: undefined,
      audioUrl: undefined,
      syllables: syllables.map(s => ({ text: s }))
    };
  }
  
  private static fallbackGenerateSampleSentence(word: string): string {
    const templates = [
      `The ${word} is on the table.`,
      `I saw a ${word} yesterday.`,
      `She likes to ${word} with her friends.`,
      `Can you find the ${word}?`,
      `My favorite ${word} is red.`
    ];
    
    return templates[Math.floor(Math.random() * templates.length)];
  }
  
  private static fallbackBreakIntoSyllables(word: string): string[] {
    // Simple algorithm: split words longer than 4 characters
    if (word.length <= 4) {
      return [word];
    }
    
    // For longer words, try to split at vowel-consonant boundaries
    const syllables = [];
    let currentSyllable = '';
    
    const isVowel = (char: string) => 'aeiou'.includes(char.toLowerCase());
    
    for (let i = 0; i < word.length; i++) {
      currentSyllable += word[i];
      
      // If we're not at the last character and we have a vowel followed by a consonant
      if (i < word.length - 2 && 
          isVowel(word[i]) && 
          !isVowel(word[i+1]) && 
          currentSyllable.length >= 2) {
        syllables.push(currentSyllable);
        currentSyllable = '';
      }
    }
    
    // Add any remaining characters
    if (currentSyllable) {
      syllables.push(currentSyllable);
    }
    
    // Handle edge cases
    if (syllables.length === 0) {
      return [word];
    }
    
    return syllables;
  }
  
  private static fallbackGeneratePronunciationFeedback(word: string, accuracy: number): string {
    if (accuracy >= 90) {
      return `Excellent pronunciation of "${word}"! You sound great!`;
    } else if (accuracy >= 75) {
      return `Good job with "${word}"! Just a bit more practice to make it perfect.`;
    } else {
      return `Let's practice "${word}" a bit more. Try to pronounce each syllable clearly.`;
    }
  }
}
